"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{9881:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),r=["components"],s={sidebar_position:1,sidebar_label:"Introduction"},l="Quick Start",c={unversionedId:"intro",id:"intro",title:"Quick Start",description:"Let's discover Koil in less than 5 minutes.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/koil/docs/intro",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Introduction"},sidebar:"tutorialSidebar"},u=[{value:"Inspiration",id:"inspiration",children:[],level:3},{value:"Main Concept",id:"main-concept",children:[],level:3},{value:"PyQt Support",id:"pyqt-support",children:[{value:"Installation",id:"installation",children:[],level:3}],level:2}],p={toc:u};function d(n){var e=n.components,t=(0,o.Z)(n,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"Let's discover ",(0,i.kt)("strong",{parentName:"p"},"Koil in less than 5 minutes"),"."),(0,i.kt)("h3",{id:"inspiration"},"Inspiration"),(0,i.kt)("p",null,'koil is an abstraction layer for threaded asyncio to enable "sensible defaults" for\nprogrammers working with frameworks that are barely compatible with asyncio (originally developped to get around pyqt5)'),(0,i.kt)("h3",{id:"main-concept"},"Main Concept"),(0,i.kt)("p",null,"Async libraries are amazing, and its an ecosystem rapidly increasing, however in some contexts it still doesn't seem like\nthe way to go and the burden of learning these concepts might be to high. However you developed a wonderful async api\nthat you want to share with the world."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class AmazingAsyncAPI:\n    def __init__(self) -> None:\n        pass\n\n    async def sleep(self):\n        await asyncio.sleep(0.01)\n        return "the-glory-of-async"\n\n    async def __aenter__(self):\n        # amazing connection logic\n        return self\n\n    async def __aexit__(self, *args, **kwargs):\n        # amazing tear down logic\n        return self\n\n')),(0,i.kt)("p",null,"However if somebody wants to use this api in sync environment they are in for a good one, as a call to asyncio.run() just wont do the trick."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from koil import koilable, unkoilable\n\n@koilable()\nclass AmazingAsyncAPI:\n    def __init__(self) -> None:\n        pass\n\n    @unkoilable()\n    async def sleep(self):\n        await asyncio.sleep(0.01)\n        return "the-glory-of-async"\n\n    async def __aenter__(self):\n        # amazing connection logic\n        return self\n\n    async def __aexit__(self, *args, **kwargs):\n        # amazing tear down logic\n        return self\n\n')),(0,i.kt)("p",null,"And now it works. Just use your Api with a normal context manager."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"with AmazingAsyncAPI as e:\n  print(e.sleep())\n")),(0,i.kt)("p",null,"Koil under the hood spawns a new event loop in another thread, calls functions that are marked with unkoilable\nthreadsafe in that loop and returns the result, when exiting it shuts down the loop in the other thread."),(0,i.kt)("p",null,"If you have multiple context managers or tasks that you would just like to run in another thread, you can\nalso create a loop in another thread"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\nasync def task(arg):\n       x = await ...\n       return x\n\nwith Koil(): # creates a threaded loop\n\n    x = unkoil(task, 1)\n\n    with AmazingAsyncAPI as e:\n       print(e.sleep())\n\n")),(0,i.kt)("p",null,"Moreover koil also is able to be used with generators"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import asyncio\nfrom koil import unkoil_gen\n\nasync def task(arg):\n    for i in range(0,20)\n      await asyncio.sleep(1)\n      yield arg\n\n\nwith Koil(): # creates a threaded loop\n\n    for x in unkoil_gen(task, 1):\n        print(x)\n\n")),(0,i.kt)("p",null,"And finally koil is able to create task like objects,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"async def task(arg):\n    await asyncio.sleep(2)\n    return arg\n\nwith Koil():\n\n  x = unkoil(task, 1, as_task=True)\n\n  # do other stuff\n\n  if x.done():\n      print(x)\n\n")),(0,i.kt)("h2",{id:"pyqt-support"},"PyQt Support"),(0,i.kt)("p",null,"... Documentation coming soon..."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install koil\n")))}d.isMDXComponent=!0}}]);